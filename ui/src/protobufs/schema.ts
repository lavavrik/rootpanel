// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "schema.proto" (package "protobufs", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Represents CPU load information.
 *
 * @generated from protobuf message protobufs.CPU
 */
export interface CPU {
    /**
     * A list of load values, one for each core.
     * Protobuf doesn't have a uint16 type, so uint32 is the standard choice.
     *
     * @generated from protobuf field: repeated uint32 load = 1
     */
    load: number[];
}
/**
 * Represents memory usage statistics.
 *
 * @generated from protobuf message protobufs.Memory
 */
export interface Memory {
    /**
     * @generated from protobuf field: uint64 used = 1
     */
    used: bigint;
    /**
     * @generated from protobuf field: uint64 free = 2
     */
    free: bigint;
}
/**
 * Represents disk usage and performance statistics for a single disk.
 *
 * @generated from protobuf message protobufs.Disk
 */
export interface Disk {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: uint64 read_speed = 2
     */
    readSpeed: bigint;
    /**
     * @generated from protobuf field: uint64 write_speed = 3
     */
    writeSpeed: bigint;
}
/**
 * Represents combined network usage and performance statistics.
 *
 * @generated from protobuf message protobufs.Network
 */
export interface Network {
    /**
     * @generated from protobuf field: uint64 bytes_sent = 1
     */
    bytesSent: bigint;
    /**
     * @generated from protobuf field: uint64 bytes_received = 2
     */
    bytesReceived: bigint;
}
/**
 * The main message that aggregates all system metrics into a single data point.
 *
 * @generated from protobuf message protobufs.DataPoint
 */
export interface DataPoint {
    /**
     * @generated from protobuf field: uint64 timestamp = 1
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: protobufs.CPU cpu = 2
     */
    cpu?: CPU;
    /**
     * @generated from protobuf field: protobufs.Memory memory = 3
     */
    memory?: Memory;
    /**
     * A list of all disks attached to the system.
     *
     * @generated from protobuf field: repeated protobufs.Disk disks = 4
     */
    disks: Disk[];
    /**
     * Network statistics.
     *
     * @generated from protobuf field: protobufs.Network network = 5
     */
    network?: Network;
}
// @generated message type with reflection information, may provide speed optimized methods
class CPU$Type extends MessageType<CPU> {
    constructor() {
        super("protobufs.CPU", [
            { no: 1, name: "load", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CPU>): CPU {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.load = [];
        if (value !== undefined)
            reflectionMergePartial<CPU>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPU): CPU {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 load */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.load.push(reader.uint32());
                    else
                        message.load.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPU, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 load = 1; */
        if (message.load.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.load.length; i++)
                writer.uint32(message.load[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobufs.CPU
 */
export const CPU = new CPU$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Memory$Type extends MessageType<Memory> {
    constructor() {
        super("protobufs.Memory", [
            { no: 1, name: "used", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "free", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Memory>): Memory {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.used = 0n;
        message.free = 0n;
        if (value !== undefined)
            reflectionMergePartial<Memory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Memory): Memory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 used */ 1:
                    message.used = reader.uint64().toBigInt();
                    break;
                case /* uint64 free */ 2:
                    message.free = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Memory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 used = 1; */
        if (message.used !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.used);
        /* uint64 free = 2; */
        if (message.free !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.free);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobufs.Memory
 */
export const Memory = new Memory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Disk$Type extends MessageType<Disk> {
    constructor() {
        super("protobufs.Disk", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "read_speed", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "write_speed", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Disk>): Disk {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.readSpeed = 0n;
        message.writeSpeed = 0n;
        if (value !== undefined)
            reflectionMergePartial<Disk>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Disk): Disk {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* uint64 read_speed */ 2:
                    message.readSpeed = reader.uint64().toBigInt();
                    break;
                case /* uint64 write_speed */ 3:
                    message.writeSpeed = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Disk, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* uint64 read_speed = 2; */
        if (message.readSpeed !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.readSpeed);
        /* uint64 write_speed = 3; */
        if (message.writeSpeed !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.writeSpeed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobufs.Disk
 */
export const Disk = new Disk$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Network$Type extends MessageType<Network> {
    constructor() {
        super("protobufs.Network", [
            { no: 1, name: "bytes_sent", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bytes_received", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Network>): Network {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bytesSent = 0n;
        message.bytesReceived = 0n;
        if (value !== undefined)
            reflectionMergePartial<Network>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Network): Network {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 bytes_sent */ 1:
                    message.bytesSent = reader.uint64().toBigInt();
                    break;
                case /* uint64 bytes_received */ 2:
                    message.bytesReceived = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Network, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 bytes_sent = 1; */
        if (message.bytesSent !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.bytesSent);
        /* uint64 bytes_received = 2; */
        if (message.bytesReceived !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.bytesReceived);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobufs.Network
 */
export const Network = new Network$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DataPoint$Type extends MessageType<DataPoint> {
    constructor() {
        super("protobufs.DataPoint", [
            { no: 1, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cpu", kind: "message", T: () => CPU },
            { no: 3, name: "memory", kind: "message", T: () => Memory },
            { no: 4, name: "disks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Disk },
            { no: 5, name: "network", kind: "message", T: () => Network }
        ]);
    }
    create(value?: PartialMessage<DataPoint>): DataPoint {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timestamp = 0n;
        message.disks = [];
        if (value !== undefined)
            reflectionMergePartial<DataPoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DataPoint): DataPoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 timestamp */ 1:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* protobufs.CPU cpu */ 2:
                    message.cpu = CPU.internalBinaryRead(reader, reader.uint32(), options, message.cpu);
                    break;
                case /* protobufs.Memory memory */ 3:
                    message.memory = Memory.internalBinaryRead(reader, reader.uint32(), options, message.memory);
                    break;
                case /* repeated protobufs.Disk disks */ 4:
                    message.disks.push(Disk.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* protobufs.Network network */ 5:
                    message.network = Network.internalBinaryRead(reader, reader.uint32(), options, message.network);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DataPoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 timestamp = 1; */
        if (message.timestamp !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.timestamp);
        /* protobufs.CPU cpu = 2; */
        if (message.cpu)
            CPU.internalBinaryWrite(message.cpu, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* protobufs.Memory memory = 3; */
        if (message.memory)
            Memory.internalBinaryWrite(message.memory, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobufs.Disk disks = 4; */
        for (let i = 0; i < message.disks.length; i++)
            Disk.internalBinaryWrite(message.disks[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* protobufs.Network network = 5; */
        if (message.network)
            Network.internalBinaryWrite(message.network, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobufs.DataPoint
 */
export const DataPoint = new DataPoint$Type();
